/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `AppDemo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/client';
import type * as $Enums from '../enums.js';
import type * as Prisma from '../internal/prismaNamespace.js';

/**
 * Model AppDemo
 *
 */
export type AppDemoModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AppDemoPayload>;

export type AggregateAppDemo = {
  _count: AppDemoCountAggregateOutputType | null;
  _min: AppDemoMinAggregateOutputType | null;
  _max: AppDemoMaxAggregateOutputType | null;
};

export type AppDemoMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type AppDemoMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type AppDemoCountAggregateOutputType = {
  id: number;
  name: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type AppDemoMinAggregateInputType = {
  id?: true;
  name?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type AppDemoMaxAggregateInputType = {
  id?: true;
  name?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type AppDemoCountAggregateInputType = {
  id?: true;
  name?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type AppDemoAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which AppDemo to aggregate.
   */
  where?: Prisma.AppDemoWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AppDemos to fetch.
   */
  orderBy?:
    | Prisma.AppDemoOrderByWithRelationInput
    | Prisma.AppDemoOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AppDemoWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AppDemos from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AppDemos.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AppDemos
   **/
  _count?: true | AppDemoCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AppDemoMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AppDemoMaxAggregateInputType;
};

export type GetAppDemoAggregateType<T extends AppDemoAggregateArgs> = {
  [P in keyof T & keyof AggregateAppDemo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAppDemo[P]>
    : Prisma.GetScalarType<T[P], AggregateAppDemo[P]>;
};

export type AppDemoGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.AppDemoWhereInput;
  orderBy?:
    | Prisma.AppDemoOrderByWithAggregationInput
    | Prisma.AppDemoOrderByWithAggregationInput[];
  by: Prisma.AppDemoScalarFieldEnum[] | Prisma.AppDemoScalarFieldEnum;
  having?: Prisma.AppDemoScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AppDemoCountAggregateInputType | true;
  _min?: AppDemoMinAggregateInputType;
  _max?: AppDemoMaxAggregateInputType;
};

export type AppDemoGroupByOutputType = {
  id: string;
  name: string;
  createdAt: Date;
  updatedAt: Date;
  _count: AppDemoCountAggregateOutputType | null;
  _min: AppDemoMinAggregateOutputType | null;
  _max: AppDemoMaxAggregateOutputType | null;
};

type GetAppDemoGroupByPayload<T extends AppDemoGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<AppDemoGroupByOutputType, T['by']> & {
        [P in keyof T & keyof AppDemoGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AppDemoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AppDemoGroupByOutputType[P]>;
      }
    >
  >;

export type AppDemoWhereInput = {
  AND?: Prisma.AppDemoWhereInput | Prisma.AppDemoWhereInput[];
  OR?: Prisma.AppDemoWhereInput[];
  NOT?: Prisma.AppDemoWhereInput | Prisma.AppDemoWhereInput[];
  id?: Prisma.UuidFilter<'AppDemo'> | string;
  name?: Prisma.StringFilter<'AppDemo'> | string;
  createdAt?: Prisma.DateTimeFilter<'AppDemo'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'AppDemo'> | Date | string;
};

export type AppDemoOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AppDemoWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    name?: string;
    AND?: Prisma.AppDemoWhereInput | Prisma.AppDemoWhereInput[];
    OR?: Prisma.AppDemoWhereInput[];
    NOT?: Prisma.AppDemoWhereInput | Prisma.AppDemoWhereInput[];
    createdAt?: Prisma.DateTimeFilter<'AppDemo'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'AppDemo'> | Date | string;
  },
  'id' | 'name'
>;

export type AppDemoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.AppDemoCountOrderByAggregateInput;
  _max?: Prisma.AppDemoMaxOrderByAggregateInput;
  _min?: Prisma.AppDemoMinOrderByAggregateInput;
};

export type AppDemoScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AppDemoScalarWhereWithAggregatesInput
    | Prisma.AppDemoScalarWhereWithAggregatesInput[];
  OR?: Prisma.AppDemoScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AppDemoScalarWhereWithAggregatesInput
    | Prisma.AppDemoScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'AppDemo'> | string;
  name?: Prisma.StringWithAggregatesFilter<'AppDemo'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'AppDemo'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'AppDemo'> | Date | string;
};

export type AppDemoCreateInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AppDemoUncheckedCreateInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AppDemoUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AppDemoUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AppDemoCreateManyInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AppDemoUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AppDemoUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AppDemoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AppDemoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AppDemoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type StringFieldUpdateOperationsInput = {
  set?: string;
};

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string;
};

export type AppDemoSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['appDemo']
>;

export type AppDemoSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['appDemo']
>;

export type AppDemoSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['appDemo']
>;

export type AppDemoSelectScalar = {
  id?: boolean;
  name?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type AppDemoOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  'id' | 'name' | 'createdAt' | 'updatedAt',
  ExtArgs['result']['appDemo']
>;

export type $AppDemoPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: 'AppDemo';
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      /**
       * @DtoCreateHidden
       */
      id: string;
      name: string;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      createdAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      updatedAt: Date;
    },
    ExtArgs['result']['appDemo']
  >;
  composites: {};
};

export type AppDemoGetPayload<
  S extends boolean | null | undefined | AppDemoDefaultArgs
> = runtime.Types.Result.GetResult<Prisma.$AppDemoPayload, S>;

export type AppDemoCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<AppDemoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: AppDemoCountAggregateInputType | true;
};

export interface AppDemoDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['AppDemo'];
    meta: { name: 'AppDemo' };
  };
  /**
   * Find zero or one AppDemo that matches the filter.
   * @param {AppDemoFindUniqueArgs} args - Arguments to find a AppDemo
   * @example
   * // Get one AppDemo
   * const appDemo = await prisma.appDemo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AppDemoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AppDemoFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__AppDemoClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppDemoPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AppDemo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AppDemoFindUniqueOrThrowArgs} args - Arguments to find a AppDemo
   * @example
   * // Get one AppDemo
   * const appDemo = await prisma.appDemo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AppDemoFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AppDemoFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AppDemoClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppDemoPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AppDemo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppDemoFindFirstArgs} args - Arguments to find a AppDemo
   * @example
   * // Get one AppDemo
   * const appDemo = await prisma.appDemo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AppDemoFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AppDemoFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__AppDemoClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppDemoPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AppDemo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppDemoFindFirstOrThrowArgs} args - Arguments to find a AppDemo
   * @example
   * // Get one AppDemo
   * const appDemo = await prisma.appDemo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AppDemoFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AppDemoFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AppDemoClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppDemoPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AppDemos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppDemoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AppDemos
   * const appDemos = await prisma.appDemo.findMany()
   *
   * // Get first 10 AppDemos
   * const appDemos = await prisma.appDemo.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const appDemoWithIdOnly = await prisma.appDemo.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AppDemoFindManyArgs>(
    args?: Prisma.SelectSubset<T, AppDemoFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AppDemoPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AppDemo.
   * @param {AppDemoCreateArgs} args - Arguments to create a AppDemo.
   * @example
   * // Create one AppDemo
   * const AppDemo = await prisma.appDemo.create({
   *   data: {
   *     // ... data to create a AppDemo
   *   }
   * })
   *
   */
  create<T extends AppDemoCreateArgs>(
    args: Prisma.SelectSubset<T, AppDemoCreateArgs<ExtArgs>>
  ): Prisma.Prisma__AppDemoClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppDemoPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AppDemos.
   * @param {AppDemoCreateManyArgs} args - Arguments to create many AppDemos.
   * @example
   * // Create many AppDemos
   * const appDemo = await prisma.appDemo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AppDemoCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AppDemoCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AppDemos and returns the data saved in the database.
   * @param {AppDemoCreateManyAndReturnArgs} args - Arguments to create many AppDemos.
   * @example
   * // Create many AppDemos
   * const appDemo = await prisma.appDemo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AppDemos and only return the `id`
   * const appDemoWithIdOnly = await prisma.appDemo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AppDemoCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AppDemoCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AppDemoPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AppDemo.
   * @param {AppDemoDeleteArgs} args - Arguments to delete one AppDemo.
   * @example
   * // Delete one AppDemo
   * const AppDemo = await prisma.appDemo.delete({
   *   where: {
   *     // ... filter to delete one AppDemo
   *   }
   * })
   *
   */
  delete<T extends AppDemoDeleteArgs>(
    args: Prisma.SelectSubset<T, AppDemoDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__AppDemoClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppDemoPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AppDemo.
   * @param {AppDemoUpdateArgs} args - Arguments to update one AppDemo.
   * @example
   * // Update one AppDemo
   * const appDemo = await prisma.appDemo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AppDemoUpdateArgs>(
    args: Prisma.SelectSubset<T, AppDemoUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__AppDemoClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppDemoPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AppDemos.
   * @param {AppDemoDeleteManyArgs} args - Arguments to filter AppDemos to delete.
   * @example
   * // Delete a few AppDemos
   * const { count } = await prisma.appDemo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AppDemoDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AppDemoDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AppDemos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppDemoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AppDemos
   * const appDemo = await prisma.appDemo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AppDemoUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AppDemoUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AppDemos and returns the data updated in the database.
   * @param {AppDemoUpdateManyAndReturnArgs} args - Arguments to update many AppDemos.
   * @example
   * // Update many AppDemos
   * const appDemo = await prisma.appDemo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AppDemos and only return the `id`
   * const appDemoWithIdOnly = await prisma.appDemo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AppDemoUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AppDemoUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AppDemoPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AppDemo.
   * @param {AppDemoUpsertArgs} args - Arguments to update or create a AppDemo.
   * @example
   * // Update or create a AppDemo
   * const appDemo = await prisma.appDemo.upsert({
   *   create: {
   *     // ... data to create a AppDemo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AppDemo we want to update
   *   }
   * })
   */
  upsert<T extends AppDemoUpsertArgs>(
    args: Prisma.SelectSubset<T, AppDemoUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__AppDemoClient<
    runtime.Types.Result.GetResult<
      Prisma.$AppDemoPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AppDemos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppDemoCountArgs} args - Arguments to filter AppDemos to count.
   * @example
   * // Count the number of AppDemos
   * const count = await prisma.appDemo.count({
   *   where: {
   *     // ... the filter for the AppDemos we want to count
   *   }
   * })
   **/
  count<T extends AppDemoCountArgs>(
    args?: Prisma.Subset<T, AppDemoCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AppDemoCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AppDemo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppDemoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AppDemoAggregateArgs>(
    args: Prisma.Subset<T, AppDemoAggregateArgs>
  ): Prisma.PrismaPromise<GetAppDemoAggregateType<T>>;

  /**
   * Group by AppDemo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppDemoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AppDemoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AppDemoGroupByArgs['orderBy'] }
      : { orderBy?: AppDemoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : 'take' extends Prisma.Keys<T>
      ? 'orderBy' extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Prisma.Keys<T>
      ? 'orderBy' extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, AppDemoGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetAppDemoGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AppDemo model
   */
  readonly fields: AppDemoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AppDemo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AppDemoClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AppDemo model
 */
export interface AppDemoFieldRefs {
  readonly id: Prisma.FieldRef<'AppDemo', 'String'>;
  readonly name: Prisma.FieldRef<'AppDemo', 'String'>;
  readonly createdAt: Prisma.FieldRef<'AppDemo', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'AppDemo', 'DateTime'>;
}

// Custom InputTypes
/**
 * AppDemo findUnique
 */
export type AppDemoFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AppDemo
   */
  select?: Prisma.AppDemoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppDemo
   */
  omit?: Prisma.AppDemoOmit<ExtArgs> | null;
  /**
   * Filter, which AppDemo to fetch.
   */
  where: Prisma.AppDemoWhereUniqueInput;
};

/**
 * AppDemo findUniqueOrThrow
 */
export type AppDemoFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AppDemo
   */
  select?: Prisma.AppDemoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppDemo
   */
  omit?: Prisma.AppDemoOmit<ExtArgs> | null;
  /**
   * Filter, which AppDemo to fetch.
   */
  where: Prisma.AppDemoWhereUniqueInput;
};

/**
 * AppDemo findFirst
 */
export type AppDemoFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AppDemo
   */
  select?: Prisma.AppDemoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppDemo
   */
  omit?: Prisma.AppDemoOmit<ExtArgs> | null;
  /**
   * Filter, which AppDemo to fetch.
   */
  where?: Prisma.AppDemoWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AppDemos to fetch.
   */
  orderBy?:
    | Prisma.AppDemoOrderByWithRelationInput
    | Prisma.AppDemoOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AppDemos.
   */
  cursor?: Prisma.AppDemoWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AppDemos from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AppDemos.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AppDemos.
   */
  distinct?: Prisma.AppDemoScalarFieldEnum | Prisma.AppDemoScalarFieldEnum[];
};

/**
 * AppDemo findFirstOrThrow
 */
export type AppDemoFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AppDemo
   */
  select?: Prisma.AppDemoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppDemo
   */
  omit?: Prisma.AppDemoOmit<ExtArgs> | null;
  /**
   * Filter, which AppDemo to fetch.
   */
  where?: Prisma.AppDemoWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AppDemos to fetch.
   */
  orderBy?:
    | Prisma.AppDemoOrderByWithRelationInput
    | Prisma.AppDemoOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AppDemos.
   */
  cursor?: Prisma.AppDemoWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AppDemos from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AppDemos.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AppDemos.
   */
  distinct?: Prisma.AppDemoScalarFieldEnum | Prisma.AppDemoScalarFieldEnum[];
};

/**
 * AppDemo findMany
 */
export type AppDemoFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AppDemo
   */
  select?: Prisma.AppDemoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppDemo
   */
  omit?: Prisma.AppDemoOmit<ExtArgs> | null;
  /**
   * Filter, which AppDemos to fetch.
   */
  where?: Prisma.AppDemoWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AppDemos to fetch.
   */
  orderBy?:
    | Prisma.AppDemoOrderByWithRelationInput
    | Prisma.AppDemoOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AppDemos.
   */
  cursor?: Prisma.AppDemoWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AppDemos from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AppDemos.
   */
  skip?: number;
  distinct?: Prisma.AppDemoScalarFieldEnum | Prisma.AppDemoScalarFieldEnum[];
};

/**
 * AppDemo create
 */
export type AppDemoCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AppDemo
   */
  select?: Prisma.AppDemoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppDemo
   */
  omit?: Prisma.AppDemoOmit<ExtArgs> | null;
  /**
   * The data needed to create a AppDemo.
   */
  data: Prisma.XOR<
    Prisma.AppDemoCreateInput,
    Prisma.AppDemoUncheckedCreateInput
  >;
};

/**
 * AppDemo createMany
 */
export type AppDemoCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many AppDemos.
   */
  data: Prisma.AppDemoCreateManyInput | Prisma.AppDemoCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AppDemo createManyAndReturn
 */
export type AppDemoCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AppDemo
   */
  select?: Prisma.AppDemoSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AppDemo
   */
  omit?: Prisma.AppDemoOmit<ExtArgs> | null;
  /**
   * The data used to create many AppDemos.
   */
  data: Prisma.AppDemoCreateManyInput | Prisma.AppDemoCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AppDemo update
 */
export type AppDemoUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AppDemo
   */
  select?: Prisma.AppDemoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppDemo
   */
  omit?: Prisma.AppDemoOmit<ExtArgs> | null;
  /**
   * The data needed to update a AppDemo.
   */
  data: Prisma.XOR<
    Prisma.AppDemoUpdateInput,
    Prisma.AppDemoUncheckedUpdateInput
  >;
  /**
   * Choose, which AppDemo to update.
   */
  where: Prisma.AppDemoWhereUniqueInput;
};

/**
 * AppDemo updateMany
 */
export type AppDemoUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update AppDemos.
   */
  data: Prisma.XOR<
    Prisma.AppDemoUpdateManyMutationInput,
    Prisma.AppDemoUncheckedUpdateManyInput
  >;
  /**
   * Filter which AppDemos to update
   */
  where?: Prisma.AppDemoWhereInput;
  /**
   * Limit how many AppDemos to update.
   */
  limit?: number;
};

/**
 * AppDemo updateManyAndReturn
 */
export type AppDemoUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AppDemo
   */
  select?: Prisma.AppDemoSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AppDemo
   */
  omit?: Prisma.AppDemoOmit<ExtArgs> | null;
  /**
   * The data used to update AppDemos.
   */
  data: Prisma.XOR<
    Prisma.AppDemoUpdateManyMutationInput,
    Prisma.AppDemoUncheckedUpdateManyInput
  >;
  /**
   * Filter which AppDemos to update
   */
  where?: Prisma.AppDemoWhereInput;
  /**
   * Limit how many AppDemos to update.
   */
  limit?: number;
};

/**
 * AppDemo upsert
 */
export type AppDemoUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AppDemo
   */
  select?: Prisma.AppDemoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppDemo
   */
  omit?: Prisma.AppDemoOmit<ExtArgs> | null;
  /**
   * The filter to search for the AppDemo to update in case it exists.
   */
  where: Prisma.AppDemoWhereUniqueInput;
  /**
   * In case the AppDemo found by the `where` argument doesn't exist, create a new AppDemo with this data.
   */
  create: Prisma.XOR<
    Prisma.AppDemoCreateInput,
    Prisma.AppDemoUncheckedCreateInput
  >;
  /**
   * In case the AppDemo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AppDemoUpdateInput,
    Prisma.AppDemoUncheckedUpdateInput
  >;
};

/**
 * AppDemo delete
 */
export type AppDemoDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AppDemo
   */
  select?: Prisma.AppDemoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppDemo
   */
  omit?: Prisma.AppDemoOmit<ExtArgs> | null;
  /**
   * Filter which AppDemo to delete.
   */
  where: Prisma.AppDemoWhereUniqueInput;
};

/**
 * AppDemo deleteMany
 */
export type AppDemoDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which AppDemos to delete
   */
  where?: Prisma.AppDemoWhereInput;
  /**
   * Limit how many AppDemos to delete.
   */
  limit?: number;
};

/**
 * AppDemo without action
 */
export type AppDemoDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AppDemo
   */
  select?: Prisma.AppDemoSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AppDemo
   */
  omit?: Prisma.AppDemoOmit<ExtArgs> | null;
};
