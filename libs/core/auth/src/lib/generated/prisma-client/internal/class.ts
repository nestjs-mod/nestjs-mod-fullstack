/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from '@prisma/client/runtime/client';
import type * as Prisma from './prismaNamespace';

const config: runtime.GetPrismaClientConfig = {
  generator: {
    name: 'client',
    provider: {
      fromEnvVar: null,
      value: 'prisma-client',
    },
    output: {
      value:
        '/home/endy/Projects/nestjs-mod/nestjs-mod-fullstack/libs/core/auth/src/lib/generated/prisma-client',
      fromEnvVar: null,
    },
    config: {
      moduleFormat: 'cjs',
      engineType: 'client',
    },
    binaryTargets: [
      {
        fromEnvVar: null,
        value: 'debian-openssl-3.0.x',
        native: true,
      },
    ],
    previewFeatures: ['driverAdapters', 'queryCompiler'],
    sourceFilePath:
      '/home/endy/Projects/nestjs-mod/nestjs-mod-fullstack/libs/core/auth/src/prisma/schema.prisma',
    isCustomOutput: true,
  },
  relativePath: '../../../prisma',
  clientVersion: '6.9.0',
  engineVersion: '81e4af48011447c3cc503a190e86995b66d2a28e',
  datasourceNames: ['db'],
  activeProvider: 'postgresql',
  postinstall: false,
  inlineDatasources: {
    db: {
      url: {
        fromEnvVar: 'SERVER_AUTHORIZER_AUTH_DATABASE_URL',
        value: null,
      },
    },
  },
  inlineSchema:
    'generator client {\n  provider = "prisma-client"\n\n  output = "../../../../../libs/core/auth/src/lib/generated/prisma-client"\n\n  previewFeatures = ["queryCompiler", "driverAdapters"]\n\n  moduleFormat = "cjs"\n}\n\ndatasource db {\n  provider = "postgres"\n  url      = env("SERVER_AUTHORIZER_AUTH_DATABASE_URL")\n}\n\ngenerator prismaClassGenerator {\n  provider                        = "prisma-generator-nestjs-dto"\n  output                          = "../lib/generated/rest/dto"\n  flatResourceStructure           = "false"\n  reExport                        = "false"\n  classValidation                 = "true"\n  createDtoPrefix                 = "Create"\n  entitySuffix                    = ""\n  dtoSuffix                       = "Dto"\n  exportRelationModifierClasses   = "true"\n  updateDtoPrefix                 = "Update"\n  definiteAssignmentAssertion     = "true"\n  prettier                        = "true"\n  entityPrefix                    = ""\n  noDependencies                  = "false"\n  fileNamingStyle                 = "kebab"\n  annotateAllDtoProperties        = "true"\n  outputToNestJsResourceStructure = "false"\n}\n\nmodel AuthUser {\n  /// @DtoCreateHidden\n  id             String   @id(map: "PK_AUTH_USER") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid\n  externalUserId String   @unique(map: "UQ_AUTH_USER") @db.Uuid\n  userRole       AuthRole\n  timezone       Float?\n  /// @DtoCreateHidden\n  /// @DtoUpdateHidden\n  createdAt      DateTime @default(now()) @db.Timestamp(6)\n  /// @DtoCreateHidden\n  /// @DtoUpdateHidden\n  updatedAt      DateTime @default(now()) @db.Timestamp(6)\n  lang           String?  @db.VarChar(2)\n\n  @@index([userRole], map: "IDX_AUTH_USER__USER_ROLE")\n}\n\nmodel migrations_auth {\n  installed_rank Int      @id(map: "__migrations_auth_pk")\n  version        String?  @db.VarChar(50)\n  description    String   @db.VarChar(200)\n  type           String   @db.VarChar(20)\n  script         String   @db.VarChar(1000)\n  checksum       Int?\n  installed_by   String   @db.VarChar(100)\n  installed_on   DateTime @default(now()) @db.Timestamp(6)\n  execution_time Int\n  success        Boolean\n\n  @@index([success], map: "__migrations_auth_s_idx")\n  @@map("__migrations_auth")\n}\n\nenum AuthRole {\n  Admin\n  User\n}\n',
  inlineSchemaHash:
    '78a7286559f578fec4445e79c473162bc65484bb96d4842a3b6ad501f7324865',
  copyEngine: true,
  runtimeDataModel: {
    models: {},
    enums: {},
    types: {},
  },
  dirname: '',
};

config.runtimeDataModel = JSON.parse(
  '{"models":{"AuthUser":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"externalUserId","kind":"scalar","type":"String"},{"name":"userRole","kind":"enum","type":"AuthRole"},{"name":"timezone","kind":"scalar","type":"Float"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"lang","kind":"scalar","type":"String"}],"dbName":null},"migrations_auth":{"fields":[{"name":"installed_rank","kind":"scalar","type":"Int"},{"name":"version","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"type","kind":"scalar","type":"String"},{"name":"script","kind":"scalar","type":"String"},{"name":"checksum","kind":"scalar","type":"Int"},{"name":"installed_by","kind":"scalar","type":"String"},{"name":"installed_on","kind":"scalar","type":"DateTime"},{"name":"execution_time","kind":"scalar","type":"Int"},{"name":"success","kind":"scalar","type":"Boolean"}],"dbName":"__migrations_auth"}},"enums":{},"types":{}}',
);
config.engineWasm = undefined;
config.compilerWasm = {
  getRuntime: async () =>
    await import(
      'node_modules/@prisma/client/runtime/query_compiler_bg.postgresql.mjs'
    ),

  getQueryCompilerWasmModule: async () => {
    const { readFile } = await import('node:fs/promises');

    const wasmModulePath = (await import('node:path')).resolve(
      'node_modules/@prisma/client/runtime/query_compiler_bg.postgresql.wasm',
    );
    const wasmModuleBytes = await readFile(wasmModulePath);

    return new globalThis.WebAssembly.Module(wasmModuleBytes);
  },
};

export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
  'log' extends keyof ClientOptions
    ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition>
      ? Prisma.GetEvents<ClientOptions['log']>
      : never
    : never;

export interface PrismaClientConstructor {
  /**
   * ## Prisma Client
   *
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AuthUsers
   * const authUsers = await prisma.authUser.findMany()
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    ClientOptions extends
      Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    U = LogOptions<ClientOptions>,
    ExtArgs extends
      runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  >(
    options?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>,
  ): PrismaClient<ClientOptions, U, ExtArgs>;
}

/**
 * ## Prisma Client
 *
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AuthUsers
 * const authUsers = await prisma.authUser.findMany()
 * ```
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = LogOptions<ClientOptions>,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] };

  $on<V extends U>(
    eventType: V,
    callback: (
      event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent,
    ) => void,
  ): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void;

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(
    query: string,
    ...values: any[]
  ): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(
    query: string,
    ...values: any[]
  ): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: Prisma.TransactionIsolationLevel },
  ): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>;

  $transaction<R>(
    fn: (
      prisma: Omit<PrismaClient, runtime.ITXClientDenyList>,
    ) => runtime.Types.Utils.JsPromise<R>,
    options?: {
      maxWait?: number;
      timeout?: number;
      isolationLevel?: Prisma.TransactionIsolationLevel;
    },
  ): runtime.Types.Utils.JsPromise<R>;

  $extends: runtime.Types.Extensions.ExtendsHook<
    'extends',
    Prisma.TypeMapCb<ClientOptions>,
    ExtArgs,
    runtime.Types.Utils.Call<
      Prisma.TypeMapCb<ClientOptions>,
      {
        extArgs: ExtArgs;
      }
    >
  >;

  /**
   * `prisma.authUser`: Exposes CRUD operations for the **AuthUser** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AuthUsers
   * const authUsers = await prisma.authUser.findMany()
   * ```
   */
  get authUser(): Prisma.AuthUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.migrations_auth`: Exposes CRUD operations for the **migrations_auth** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Migrations_auths
   * const migrations_auths = await prisma.migrations_auth.findMany()
   * ```
   */
  get migrations_auth(): Prisma.migrations_authDelegate<ExtArgs, ClientOptions>;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname;
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor;
}
