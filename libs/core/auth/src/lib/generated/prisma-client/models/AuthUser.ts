/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `AuthUser` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/client';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model AuthUser
 *
 */
export type AuthUserModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AuthUserPayload>;

export type AggregateAuthUser = {
  _count: AuthUserCountAggregateOutputType | null;
  _avg: AuthUserAvgAggregateOutputType | null;
  _sum: AuthUserSumAggregateOutputType | null;
  _min: AuthUserMinAggregateOutputType | null;
  _max: AuthUserMaxAggregateOutputType | null;
};

export type AuthUserAvgAggregateOutputType = {
  timezone: number | null;
};

export type AuthUserSumAggregateOutputType = {
  timezone: number | null;
};

export type AuthUserMinAggregateOutputType = {
  id: string | null;
  externalUserId: string | null;
  userRole: $Enums.AuthRole | null;
  timezone: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  lang: string | null;
};

export type AuthUserMaxAggregateOutputType = {
  id: string | null;
  externalUserId: string | null;
  userRole: $Enums.AuthRole | null;
  timezone: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  lang: string | null;
};

export type AuthUserCountAggregateOutputType = {
  id: number;
  externalUserId: number;
  userRole: number;
  timezone: number;
  createdAt: number;
  updatedAt: number;
  lang: number;
  _all: number;
};

export type AuthUserAvgAggregateInputType = {
  timezone?: true;
};

export type AuthUserSumAggregateInputType = {
  timezone?: true;
};

export type AuthUserMinAggregateInputType = {
  id?: true;
  externalUserId?: true;
  userRole?: true;
  timezone?: true;
  createdAt?: true;
  updatedAt?: true;
  lang?: true;
};

export type AuthUserMaxAggregateInputType = {
  id?: true;
  externalUserId?: true;
  userRole?: true;
  timezone?: true;
  createdAt?: true;
  updatedAt?: true;
  lang?: true;
};

export type AuthUserCountAggregateInputType = {
  id?: true;
  externalUserId?: true;
  userRole?: true;
  timezone?: true;
  createdAt?: true;
  updatedAt?: true;
  lang?: true;
  _all?: true;
};

export type AuthUserAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AuthUser to aggregate.
   */
  where?: Prisma.AuthUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AuthUsers to fetch.
   */
  orderBy?:
    | Prisma.AuthUserOrderByWithRelationInput
    | Prisma.AuthUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AuthUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AuthUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AuthUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AuthUsers
   **/
  _count?: true | AuthUserCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AuthUserAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AuthUserSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AuthUserMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AuthUserMaxAggregateInputType;
};

export type GetAuthUserAggregateType<T extends AuthUserAggregateArgs> = {
  [P in keyof T & keyof AggregateAuthUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAuthUser[P]>
    : Prisma.GetScalarType<T[P], AggregateAuthUser[P]>;
};

export type AuthUserGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AuthUserWhereInput;
  orderBy?:
    | Prisma.AuthUserOrderByWithAggregationInput
    | Prisma.AuthUserOrderByWithAggregationInput[];
  by: Prisma.AuthUserScalarFieldEnum[] | Prisma.AuthUserScalarFieldEnum;
  having?: Prisma.AuthUserScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AuthUserCountAggregateInputType | true;
  _avg?: AuthUserAvgAggregateInputType;
  _sum?: AuthUserSumAggregateInputType;
  _min?: AuthUserMinAggregateInputType;
  _max?: AuthUserMaxAggregateInputType;
};

export type AuthUserGroupByOutputType = {
  id: string;
  externalUserId: string;
  userRole: $Enums.AuthRole;
  timezone: number | null;
  createdAt: Date;
  updatedAt: Date;
  lang: string | null;
  _count: AuthUserCountAggregateOutputType | null;
  _avg: AuthUserAvgAggregateOutputType | null;
  _sum: AuthUserSumAggregateOutputType | null;
  _min: AuthUserMinAggregateOutputType | null;
  _max: AuthUserMaxAggregateOutputType | null;
};

type GetAuthUserGroupByPayload<T extends AuthUserGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<AuthUserGroupByOutputType, T['by']> & {
        [P in keyof T & keyof AuthUserGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AuthUserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AuthUserGroupByOutputType[P]>;
      }
    >
  >;

export type AuthUserWhereInput = {
  AND?: Prisma.AuthUserWhereInput | Prisma.AuthUserWhereInput[];
  OR?: Prisma.AuthUserWhereInput[];
  NOT?: Prisma.AuthUserWhereInput | Prisma.AuthUserWhereInput[];
  id?: Prisma.UuidFilter<'AuthUser'> | string;
  externalUserId?: Prisma.UuidFilter<'AuthUser'> | string;
  userRole?: Prisma.EnumAuthRoleFilter<'AuthUser'> | $Enums.AuthRole;
  timezone?: Prisma.FloatNullableFilter<'AuthUser'> | number | null;
  createdAt?: Prisma.DateTimeFilter<'AuthUser'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'AuthUser'> | Date | string;
  lang?: Prisma.StringNullableFilter<'AuthUser'> | string | null;
};

export type AuthUserOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  externalUserId?: Prisma.SortOrder;
  userRole?: Prisma.SortOrder;
  timezone?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  lang?: Prisma.SortOrderInput | Prisma.SortOrder;
};

export type AuthUserWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    externalUserId?: string;
    AND?: Prisma.AuthUserWhereInput | Prisma.AuthUserWhereInput[];
    OR?: Prisma.AuthUserWhereInput[];
    NOT?: Prisma.AuthUserWhereInput | Prisma.AuthUserWhereInput[];
    userRole?: Prisma.EnumAuthRoleFilter<'AuthUser'> | $Enums.AuthRole;
    timezone?: Prisma.FloatNullableFilter<'AuthUser'> | number | null;
    createdAt?: Prisma.DateTimeFilter<'AuthUser'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'AuthUser'> | Date | string;
    lang?: Prisma.StringNullableFilter<'AuthUser'> | string | null;
  },
  'id' | 'externalUserId'
>;

export type AuthUserOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  externalUserId?: Prisma.SortOrder;
  userRole?: Prisma.SortOrder;
  timezone?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  lang?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.AuthUserCountOrderByAggregateInput;
  _avg?: Prisma.AuthUserAvgOrderByAggregateInput;
  _max?: Prisma.AuthUserMaxOrderByAggregateInput;
  _min?: Prisma.AuthUserMinOrderByAggregateInput;
  _sum?: Prisma.AuthUserSumOrderByAggregateInput;
};

export type AuthUserScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AuthUserScalarWhereWithAggregatesInput
    | Prisma.AuthUserScalarWhereWithAggregatesInput[];
  OR?: Prisma.AuthUserScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AuthUserScalarWhereWithAggregatesInput
    | Prisma.AuthUserScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'AuthUser'> | string;
  externalUserId?: Prisma.UuidWithAggregatesFilter<'AuthUser'> | string;
  userRole?:
    | Prisma.EnumAuthRoleWithAggregatesFilter<'AuthUser'>
    | $Enums.AuthRole;
  timezone?:
    | Prisma.FloatNullableWithAggregatesFilter<'AuthUser'>
    | number
    | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'AuthUser'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'AuthUser'> | Date | string;
  lang?: Prisma.StringNullableWithAggregatesFilter<'AuthUser'> | string | null;
};

export type AuthUserCreateInput = {
  id?: string;
  externalUserId: string;
  userRole: $Enums.AuthRole;
  timezone?: number | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  lang?: string | null;
};

export type AuthUserUncheckedCreateInput = {
  id?: string;
  externalUserId: string;
  userRole: $Enums.AuthRole;
  timezone?: number | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  lang?: string | null;
};

export type AuthUserUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string;
  userRole?: Prisma.EnumAuthRoleFieldUpdateOperationsInput | $Enums.AuthRole;
  timezone?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lang?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AuthUserUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string;
  userRole?: Prisma.EnumAuthRoleFieldUpdateOperationsInput | $Enums.AuthRole;
  timezone?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lang?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AuthUserCreateManyInput = {
  id?: string;
  externalUserId: string;
  userRole: $Enums.AuthRole;
  timezone?: number | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  lang?: string | null;
};

export type AuthUserUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string;
  userRole?: Prisma.EnumAuthRoleFieldUpdateOperationsInput | $Enums.AuthRole;
  timezone?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lang?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AuthUserUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  externalUserId?: Prisma.StringFieldUpdateOperationsInput | string;
  userRole?: Prisma.EnumAuthRoleFieldUpdateOperationsInput | $Enums.AuthRole;
  timezone?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  lang?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AuthUserCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  externalUserId?: Prisma.SortOrder;
  userRole?: Prisma.SortOrder;
  timezone?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  lang?: Prisma.SortOrder;
};

export type AuthUserAvgOrderByAggregateInput = {
  timezone?: Prisma.SortOrder;
};

export type AuthUserMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  externalUserId?: Prisma.SortOrder;
  userRole?: Prisma.SortOrder;
  timezone?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  lang?: Prisma.SortOrder;
};

export type AuthUserMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  externalUserId?: Prisma.SortOrder;
  userRole?: Prisma.SortOrder;
  timezone?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  lang?: Prisma.SortOrder;
};

export type AuthUserSumOrderByAggregateInput = {
  timezone?: Prisma.SortOrder;
};

export type StringFieldUpdateOperationsInput = {
  set?: string;
};

export type EnumAuthRoleFieldUpdateOperationsInput = {
  set?: $Enums.AuthRole;
};

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null;
  increment?: number;
  decrement?: number;
  multiply?: number;
  divide?: number;
};

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string;
};

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null;
};

export type AuthUserSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    externalUserId?: boolean;
    userRole?: boolean;
    timezone?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    lang?: boolean;
  },
  ExtArgs['result']['authUser']
>;

export type AuthUserSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    externalUserId?: boolean;
    userRole?: boolean;
    timezone?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    lang?: boolean;
  },
  ExtArgs['result']['authUser']
>;

export type AuthUserSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    externalUserId?: boolean;
    userRole?: boolean;
    timezone?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    lang?: boolean;
  },
  ExtArgs['result']['authUser']
>;

export type AuthUserSelectScalar = {
  id?: boolean;
  externalUserId?: boolean;
  userRole?: boolean;
  timezone?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  lang?: boolean;
};

export type AuthUserOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'externalUserId'
  | 'userRole'
  | 'timezone'
  | 'createdAt'
  | 'updatedAt'
  | 'lang',
  ExtArgs['result']['authUser']
>;

export type $AuthUserPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'AuthUser';
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      /**
       * @DtoCreateHidden
       */
      id: string;
      externalUserId: string;
      userRole: $Enums.AuthRole;
      timezone: number | null;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      createdAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      updatedAt: Date;
      lang: string | null;
    },
    ExtArgs['result']['authUser']
  >;
  composites: {};
};

export type AuthUserGetPayload<
  S extends boolean | null | undefined | AuthUserDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AuthUserPayload, S>;

export type AuthUserCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<AuthUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: AuthUserCountAggregateInputType | true;
};

export interface AuthUserDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['AuthUser'];
    meta: { name: 'AuthUser' };
  };
  /**
   * Find zero or one AuthUser that matches the filter.
   * @param {AuthUserFindUniqueArgs} args - Arguments to find a AuthUser
   * @example
   * // Get one AuthUser
   * const authUser = await prisma.authUser.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AuthUserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AuthUserFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__AuthUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AuthUserPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AuthUser that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AuthUserFindUniqueOrThrowArgs} args - Arguments to find a AuthUser
   * @example
   * // Get one AuthUser
   * const authUser = await prisma.authUser.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AuthUserFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AuthUserFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AuthUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AuthUserPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AuthUser that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthUserFindFirstArgs} args - Arguments to find a AuthUser
   * @example
   * // Get one AuthUser
   * const authUser = await prisma.authUser.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AuthUserFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AuthUserFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__AuthUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AuthUserPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AuthUser that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthUserFindFirstOrThrowArgs} args - Arguments to find a AuthUser
   * @example
   * // Get one AuthUser
   * const authUser = await prisma.authUser.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AuthUserFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AuthUserFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AuthUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AuthUserPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AuthUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthUserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AuthUsers
   * const authUsers = await prisma.authUser.findMany()
   *
   * // Get first 10 AuthUsers
   * const authUsers = await prisma.authUser.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const authUserWithIdOnly = await prisma.authUser.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AuthUserFindManyArgs>(
    args?: Prisma.SelectSubset<T, AuthUserFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AuthUserPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AuthUser.
   * @param {AuthUserCreateArgs} args - Arguments to create a AuthUser.
   * @example
   * // Create one AuthUser
   * const AuthUser = await prisma.authUser.create({
   *   data: {
   *     // ... data to create a AuthUser
   *   }
   * })
   *
   */
  create<T extends AuthUserCreateArgs>(
    args: Prisma.SelectSubset<T, AuthUserCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__AuthUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AuthUserPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AuthUsers.
   * @param {AuthUserCreateManyArgs} args - Arguments to create many AuthUsers.
   * @example
   * // Create many AuthUsers
   * const authUser = await prisma.authUser.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AuthUserCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AuthUserCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AuthUsers and returns the data saved in the database.
   * @param {AuthUserCreateManyAndReturnArgs} args - Arguments to create many AuthUsers.
   * @example
   * // Create many AuthUsers
   * const authUser = await prisma.authUser.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AuthUsers and only return the `id`
   * const authUserWithIdOnly = await prisma.authUser.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AuthUserCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AuthUserCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AuthUserPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AuthUser.
   * @param {AuthUserDeleteArgs} args - Arguments to delete one AuthUser.
   * @example
   * // Delete one AuthUser
   * const AuthUser = await prisma.authUser.delete({
   *   where: {
   *     // ... filter to delete one AuthUser
   *   }
   * })
   *
   */
  delete<T extends AuthUserDeleteArgs>(
    args: Prisma.SelectSubset<T, AuthUserDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__AuthUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AuthUserPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AuthUser.
   * @param {AuthUserUpdateArgs} args - Arguments to update one AuthUser.
   * @example
   * // Update one AuthUser
   * const authUser = await prisma.authUser.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AuthUserUpdateArgs>(
    args: Prisma.SelectSubset<T, AuthUserUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__AuthUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AuthUserPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AuthUsers.
   * @param {AuthUserDeleteManyArgs} args - Arguments to filter AuthUsers to delete.
   * @example
   * // Delete a few AuthUsers
   * const { count } = await prisma.authUser.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AuthUserDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AuthUserDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AuthUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthUserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AuthUsers
   * const authUser = await prisma.authUser.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AuthUserUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AuthUserUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AuthUsers and returns the data updated in the database.
   * @param {AuthUserUpdateManyAndReturnArgs} args - Arguments to update many AuthUsers.
   * @example
   * // Update many AuthUsers
   * const authUser = await prisma.authUser.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AuthUsers and only return the `id`
   * const authUserWithIdOnly = await prisma.authUser.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AuthUserUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AuthUserUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AuthUserPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AuthUser.
   * @param {AuthUserUpsertArgs} args - Arguments to update or create a AuthUser.
   * @example
   * // Update or create a AuthUser
   * const authUser = await prisma.authUser.upsert({
   *   create: {
   *     // ... data to create a AuthUser
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AuthUser we want to update
   *   }
   * })
   */
  upsert<T extends AuthUserUpsertArgs>(
    args: Prisma.SelectSubset<T, AuthUserUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__AuthUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AuthUserPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AuthUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthUserCountArgs} args - Arguments to filter AuthUsers to count.
   * @example
   * // Count the number of AuthUsers
   * const count = await prisma.authUser.count({
   *   where: {
   *     // ... the filter for the AuthUsers we want to count
   *   }
   * })
   **/
  count<T extends AuthUserCountArgs>(
    args?: Prisma.Subset<T, AuthUserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AuthUserCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AuthUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AuthUserAggregateArgs>(
    args: Prisma.Subset<T, AuthUserAggregateArgs>,
  ): Prisma.PrismaPromise<GetAuthUserAggregateType<T>>;

  /**
   * Group by AuthUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthUserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AuthUserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AuthUserGroupByArgs['orderBy'] }
      : { orderBy?: AuthUserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, AuthUserGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetAuthUserGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AuthUser model
   */
  readonly fields: AuthUserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AuthUser.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AuthUserClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AuthUser model
 */
export interface AuthUserFieldRefs {
  readonly id: Prisma.FieldRef<'AuthUser', 'String'>;
  readonly externalUserId: Prisma.FieldRef<'AuthUser', 'String'>;
  readonly userRole: Prisma.FieldRef<'AuthUser', 'AuthRole'>;
  readonly timezone: Prisma.FieldRef<'AuthUser', 'Float'>;
  readonly createdAt: Prisma.FieldRef<'AuthUser', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'AuthUser', 'DateTime'>;
  readonly lang: Prisma.FieldRef<'AuthUser', 'String'>;
}

// Custom InputTypes
/**
 * AuthUser findUnique
 */
export type AuthUserFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AuthUser
   */
  select?: Prisma.AuthUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AuthUser
   */
  omit?: Prisma.AuthUserOmit<ExtArgs> | null;
  /**
   * Filter, which AuthUser to fetch.
   */
  where: Prisma.AuthUserWhereUniqueInput;
};

/**
 * AuthUser findUniqueOrThrow
 */
export type AuthUserFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AuthUser
   */
  select?: Prisma.AuthUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AuthUser
   */
  omit?: Prisma.AuthUserOmit<ExtArgs> | null;
  /**
   * Filter, which AuthUser to fetch.
   */
  where: Prisma.AuthUserWhereUniqueInput;
};

/**
 * AuthUser findFirst
 */
export type AuthUserFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AuthUser
   */
  select?: Prisma.AuthUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AuthUser
   */
  omit?: Prisma.AuthUserOmit<ExtArgs> | null;
  /**
   * Filter, which AuthUser to fetch.
   */
  where?: Prisma.AuthUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AuthUsers to fetch.
   */
  orderBy?:
    | Prisma.AuthUserOrderByWithRelationInput
    | Prisma.AuthUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AuthUsers.
   */
  cursor?: Prisma.AuthUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AuthUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AuthUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AuthUsers.
   */
  distinct?: Prisma.AuthUserScalarFieldEnum | Prisma.AuthUserScalarFieldEnum[];
};

/**
 * AuthUser findFirstOrThrow
 */
export type AuthUserFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AuthUser
   */
  select?: Prisma.AuthUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AuthUser
   */
  omit?: Prisma.AuthUserOmit<ExtArgs> | null;
  /**
   * Filter, which AuthUser to fetch.
   */
  where?: Prisma.AuthUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AuthUsers to fetch.
   */
  orderBy?:
    | Prisma.AuthUserOrderByWithRelationInput
    | Prisma.AuthUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AuthUsers.
   */
  cursor?: Prisma.AuthUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AuthUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AuthUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AuthUsers.
   */
  distinct?: Prisma.AuthUserScalarFieldEnum | Prisma.AuthUserScalarFieldEnum[];
};

/**
 * AuthUser findMany
 */
export type AuthUserFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AuthUser
   */
  select?: Prisma.AuthUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AuthUser
   */
  omit?: Prisma.AuthUserOmit<ExtArgs> | null;
  /**
   * Filter, which AuthUsers to fetch.
   */
  where?: Prisma.AuthUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AuthUsers to fetch.
   */
  orderBy?:
    | Prisma.AuthUserOrderByWithRelationInput
    | Prisma.AuthUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AuthUsers.
   */
  cursor?: Prisma.AuthUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AuthUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AuthUsers.
   */
  skip?: number;
  distinct?: Prisma.AuthUserScalarFieldEnum | Prisma.AuthUserScalarFieldEnum[];
};

/**
 * AuthUser create
 */
export type AuthUserCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AuthUser
   */
  select?: Prisma.AuthUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AuthUser
   */
  omit?: Prisma.AuthUserOmit<ExtArgs> | null;
  /**
   * The data needed to create a AuthUser.
   */
  data: Prisma.XOR<
    Prisma.AuthUserCreateInput,
    Prisma.AuthUserUncheckedCreateInput
  >;
};

/**
 * AuthUser createMany
 */
export type AuthUserCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many AuthUsers.
   */
  data: Prisma.AuthUserCreateManyInput | Prisma.AuthUserCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AuthUser createManyAndReturn
 */
export type AuthUserCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AuthUser
   */
  select?: Prisma.AuthUserSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AuthUser
   */
  omit?: Prisma.AuthUserOmit<ExtArgs> | null;
  /**
   * The data used to create many AuthUsers.
   */
  data: Prisma.AuthUserCreateManyInput | Prisma.AuthUserCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AuthUser update
 */
export type AuthUserUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AuthUser
   */
  select?: Prisma.AuthUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AuthUser
   */
  omit?: Prisma.AuthUserOmit<ExtArgs> | null;
  /**
   * The data needed to update a AuthUser.
   */
  data: Prisma.XOR<
    Prisma.AuthUserUpdateInput,
    Prisma.AuthUserUncheckedUpdateInput
  >;
  /**
   * Choose, which AuthUser to update.
   */
  where: Prisma.AuthUserWhereUniqueInput;
};

/**
 * AuthUser updateMany
 */
export type AuthUserUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update AuthUsers.
   */
  data: Prisma.XOR<
    Prisma.AuthUserUpdateManyMutationInput,
    Prisma.AuthUserUncheckedUpdateManyInput
  >;
  /**
   * Filter which AuthUsers to update
   */
  where?: Prisma.AuthUserWhereInput;
  /**
   * Limit how many AuthUsers to update.
   */
  limit?: number;
};

/**
 * AuthUser updateManyAndReturn
 */
export type AuthUserUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AuthUser
   */
  select?: Prisma.AuthUserSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AuthUser
   */
  omit?: Prisma.AuthUserOmit<ExtArgs> | null;
  /**
   * The data used to update AuthUsers.
   */
  data: Prisma.XOR<
    Prisma.AuthUserUpdateManyMutationInput,
    Prisma.AuthUserUncheckedUpdateManyInput
  >;
  /**
   * Filter which AuthUsers to update
   */
  where?: Prisma.AuthUserWhereInput;
  /**
   * Limit how many AuthUsers to update.
   */
  limit?: number;
};

/**
 * AuthUser upsert
 */
export type AuthUserUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AuthUser
   */
  select?: Prisma.AuthUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AuthUser
   */
  omit?: Prisma.AuthUserOmit<ExtArgs> | null;
  /**
   * The filter to search for the AuthUser to update in case it exists.
   */
  where: Prisma.AuthUserWhereUniqueInput;
  /**
   * In case the AuthUser found by the `where` argument doesn't exist, create a new AuthUser with this data.
   */
  create: Prisma.XOR<
    Prisma.AuthUserCreateInput,
    Prisma.AuthUserUncheckedCreateInput
  >;
  /**
   * In case the AuthUser was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AuthUserUpdateInput,
    Prisma.AuthUserUncheckedUpdateInput
  >;
};

/**
 * AuthUser delete
 */
export type AuthUserDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AuthUser
   */
  select?: Prisma.AuthUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AuthUser
   */
  omit?: Prisma.AuthUserOmit<ExtArgs> | null;
  /**
   * Filter which AuthUser to delete.
   */
  where: Prisma.AuthUserWhereUniqueInput;
};

/**
 * AuthUser deleteMany
 */
export type AuthUserDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AuthUsers to delete
   */
  where?: Prisma.AuthUserWhereInput;
  /**
   * Limit how many AuthUsers to delete.
   */
  limit?: number;
};

/**
 * AuthUser without action
 */
export type AuthUserDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AuthUser
   */
  select?: Prisma.AuthUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AuthUser
   */
  omit?: Prisma.AuthUserOmit<ExtArgs> | null;
};
