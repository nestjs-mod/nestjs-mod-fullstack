name: Create and publish a Docker images
on:
  push:
    branches: ['feature/post-27']
env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}-base
  BASE_SERVER_IMAGE_NAME: ${{ github.repository }}-base-server
  BUILDER_IMAGE_NAME: ${{ github.repository }}-builder
  SERVER_IMAGE_NAME: ${{ github.repository }}-server
jobs:
  check-base-image:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set ENV vars
        id: version
        run: |
          echo "version="$(npm pkg get version --workspaces=false | tr -d \") >> "$GITHUB_OUTPUT"
      - uses: cloudposse/github-action-docker-image-exists@main
        id: current
        with:
          registry: ${{ env.REGISTRY }}
          login: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          image_name: ${{ env.BASE_IMAGE_NAME }}
          organization: ${{ github.event.repository.owner.login }}
          repository: ${{ github.event.repository.name }}
          tag: ${{ steps.version.outputs.version }}
    outputs:
      result: ${{ steps.current.conclusion }}

  check-base-server-image:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set ENV vars
        id: version
        run: |
          echo "version="$(npm pkg get version --workspaces=false | tr -d \") >> "$GITHUB_OUTPUT"
      - uses: cloudposse/github-action-docker-image-exists@main
        id: current
        with:
          registry: ${{ env.REGISTRY }}
          login: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          image_name: ${{ env.BASE_SERVER_IMAGE_NAME }}
          organization: ${{ github.event.repository.owner.login }}
          repository: ${{ github.event.repository.name }}
          tag: ${{ steps.version.outputs.version }}
    outputs:
      result: ${{ steps.current.conclusion }}

  check-builder-image:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set ENV vars
        id: version
        run: |
          echo "version="$(npm pkg get version --workspaces=false | tr -d \") >> "$GITHUB_OUTPUT"
      - uses: cloudposse/github-action-docker-image-exists@main
        id: current
        with:
          registry: ${{ env.REGISTRY }}
          login: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          image_name: ${{ env.BUILDER_IMAGE_NAME }}
          organization: ${{ github.event.repository.owner.login }}
          repository: ${{ github.event.repository.name }}
          tag: ${{ steps.version.outputs.version }}
    outputs:
      result: ${{ steps.current.conclusion }}

  check-server-image:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set ENV vars
        id: version
        run: |
          echo "version="$(cd ./apps/server && npm pkg get version --workspaces=false | tr -d \") >> "$GITHUB_OUTPUT"
      - uses: cloudposse/github-action-docker-image-exists@main
        id: current
        with:
          registry: ${{ env.REGISTRY }}
          login: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          image_name: ${{ env.SERVER_IMAGE_NAME }}
          organization: ${{ github.event.repository.owner.login }}
          repository: ${{ github.event.repository.name }}
          tag: ${{ steps.version.outputs.version }}
    outputs:
      result: ${{ steps.current.conclusion }}

  build-and-push-base-image:
    runs-on: ubuntu-latest
    needs: [check-base-image]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        if: needs.check-base-image.outputs.result != 'success'
        uses: actions/checkout@v4
      - name: Set ENV vars
        if: needs.check-base-image.outputs.result != 'success'
        id: version
        run: |
          echo "version="$(npm pkg get version --workspaces=false | tr -d \") >> "$GITHUB_OUTPUT"
      - name: Log in to the Container registry
        if: needs.check-base-image.outputs.result != 'success'
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        if: needs.check-base-image.outputs.result != 'success'
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          file: ./.docker/base.Dockerfile
          build-args: PKG_VERSION=${{ steps.version.outputs.version }}
          tags: ${{ env.REGISTRY}}/${{ env.BASE_IMAGE_NAME}}:${{ steps.version.outputs.version }}
          cache-from: type=registry,ref=${{ env.REGISTRY}}/${{ env.BASE_IMAGE_NAME}}:${{ steps.version.outputs.version }}
          cache-to: type=inline
      - name: Generate artifact attestation
        if: needs.check-base-image.outputs.result != 'success'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  build-and-push-base-server-image:
    runs-on: ubuntu-latest
    needs: [build-and-push-base-image, check-base-server-image]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        if: needs.check-base-server-image.outputs.result != 'success'
        uses: actions/checkout@v4
      - name: Set ENV vars
        if: needs.check-base-server-image.outputs.result != 'success'
        id: version
        run: |
          echo "version="$(npm pkg get version --workspaces=false | tr -d \") >> "$GITHUB_OUTPUT"
      - name: Log in to the Container registry
        if: needs.check-base-server-image.outputs.result != 'success'
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        if: needs.check-base-server-image.outputs.result != 'success'
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          file: ./.docker/base-server.Dockerfile
          build-args: PKG_VERSION=${{ steps.version.outputs.version }}
          tags: ${{ env.REGISTRY}}/${{ env.BASE_SERVER_IMAGE_NAME}}:${{ steps.version.outputs.version }}
          cache-from: type=registry,ref=${{ env.REGISTRY}}/${{ env.BASE_SERVER_IMAGE_NAME}}:${{ steps.version.outputs.version }}
          cache-to: type=inline
      - name: Generate artifact attestation
        if: needs.check-base-server-image.outputs.result != 'success'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.BASE_SERVER_IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  build-and-push-builder-image:
    runs-on: ubuntu-latest
    needs: [build-and-push-base-server-image, check-builder-image]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        if: needs.check-builder-image.outputs.result != 'success'
        uses: actions/checkout@v4
      - name: Set ENV vars
        if: needs.check-builder-image.outputs.result != 'success'
        id: version
        run: |
          echo "version="$(npm pkg get version --workspaces=false | tr -d \") >> "$GITHUB_OUTPUT"
      - name: Log in to the Container registry
        if: needs.check-builder-image.outputs.result != 'success'
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker image
        if: needs.check-builder-image.outputs.result != 'success'
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          file: ./.docker/builder.Dockerfile
          build-args: PKG_VERSION=${{ steps.version.outputs.version }}
          tags: ${{ env.REGISTRY}}/${{ env.BUILDER_IMAGE_NAME}}:${{ steps.version.outputs.version }}
          cache-from: type=registry,ref=${{ env.REGISTRY}}/${{ env.BUILDER_IMAGE_NAME}}:${{ steps.version.outputs.version }}
          cache-to: type=inline
      - name: Generate artifact attestation
        if: needs.check-builder-image.outputs.result != 'success'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.BUILDER_IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  build-and-push-server-image:
    runs-on: ubuntu-latest
    needs: [build-and-push-builder-image, check-server-image]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        if: needs.check-server-image.outputs.result != 'success'
        uses: actions/checkout@v4
      - name: Set ENV vars
        if: needs.check-server-image.outputs.result != 'success'
        id: version
        run: |
          echo "version="$(cd ./apps/server && npm pkg get version --workspaces=false | tr -d \") >> "$GITHUB_OUTPUT"
      - name: Log in to the Container registry
        if: needs.check-server-image.outputs.result != 'success'
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate and build production code
        if: needs.check-server-image.outputs.result != 'success'
        run: |
          rm -rf dist .dockerignore
          cp .docker/.dockerignore .dockerignore
          mkdir -p dist
          docker run --name generate-and-build-production --mount source=dist,target=/usr/src/app/dist ${{ env.REGISTRY}}/${{ env.BUILDER_IMAGE_NAME}}:${{ steps.version.outputs.version }}
      - name: Build and push Docker image
        if: needs.check-server-image.outputs.result != 'success'
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          file: ./.docker/server.Dockerfile
          build-args: PKG_VERSION=${{ steps.version.outputs.version }}
          tags: ${{ env.REGISTRY}}/${{ env.SERVER_IMAGE_NAME}}:${{ steps.version.outputs.version }}
          cache-from: type=registry,ref=${{ env.REGISTRY}}/${{ env.SERVER_IMAGE_NAME}}:${{ steps.version.outputs.version }}
          cache-to: type=inline
      - name: Generate artifact attestation
        if: needs.check-server-image.outputs.result != 'success'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
