{
  "name": "@nestjs-mod-fullstack/source",
  "version": "0.0.0",
  "license": "MIT",
  "scripts": {
    "_____pm2-full dev infra_____": "_____pm2-full dev infra_____",
    "pm2-full:dev:start": "npm run generate && npm run docker-compose:start-prod:server && npm run db:create && npm run flyway:migrate && npm run pm2:dev:start",
    "pm2-full:dev:stop": "npm run docker-compose:stop-prod:server && npm run pm2:dev:stop",
    "_____dev infra_____": "_____dev infra_____",
    "serve:dev": "./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=serve",
    "serve:dev:server": "./node_modules/.bin/nx serve server --host=0.0.0.0",
    "_____pm2 dev infra_____": "_____pm2 dev infra_____",
    "pm2:dev:start": "./node_modules/.bin/pm2 start ./ecosystem.config.json && npm run wait-on -- --log http://localhost:3000/api/health --log http://localhost:4200",
    "pm2:dev:stop": "./node_modules/.bin/pm2 delete all",
    "_____pm2-full prod infra_____": "_____pm2-full prod infra_____",
    "pm2-full:prod:start": "npm run generate && npm run build -- -c production && npm run docker-compose:start-prod:server && npm run db:create && npm run flyway:migrate && npm run pm2:start",
    "pm2-full:prod:stop": "npm run docker-compose:stop-prod:server && npm run pm2:stop",
    "_____prod infra_____": "_____prod infra_____",
    "start": "./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=start",
    "build": "npm run generate && npm run tsc:lint && ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=build --skip-nx-cache=true",
    "start:prod:server": "./node_modules/.bin/nx start server",
    "_____pm2 prod infra_____": "_____pm2 prod infra_____",
    "pm2:start": "./node_modules/.bin/pm2 start ./ecosystem-prod.config.json && npm run wait-on -- --log http://localhost:3000/api/health --log http://localhost:3000",
    "pm2:stop": "./node_modules/.bin/pm2 delete all",
    "_____docker-compose-full prod infra_____": "_____docker-compose-full prod infra_____",
    "docker-compose-full:prod:start": "export NX_DAEMON=false && export DISABLE_SERVE_STATIC=true && npm run generate && npm run build -- -c production && npm run docker:build:server:latest && export COMPOSE_INTERACTIVE_NO_CLI=1 && docker compose -f ./.docker/docker-compose-full.yml --env-file ./.docker/docker-compose-full.env --compatibility up -d",
    "docker-compose-full:prod:stop": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker compose -f ./.docker/docker-compose-full.yml --env-file ./.docker/docker-compose-full.env --compatibility down",
    "docker-compose-full:prod:only-start": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker compose -f ./.docker/docker-compose-full.yml --env-file ./.docker/docker-compose-full.env --compatibility up -d",
    "docker-compose-full:prod:fill:database": "npm run db:create && npm run flyway:migrate",
    "docker-compose-full:prod:test:e2e": "export BASE_URL=http://localhost:8080 && npm run test:e2e",
    "_____docs_____": "_____docs_____",
    "docs:infrastructure": "export NESTJS_MODE=infrastructure && ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source,client* --all -t=serve --parallel=1 -- --watch=false --inspect=false",
    "_____docker-compose infra_____": "_____docker-compose infra_____",
    "docker-compose:start:server": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker compose -f ./apps/server/docker-compose.yml --compatibility up -d",
    "docker-compose:stop:server": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker compose -f ./apps/server/docker-compose.yml down",
    "_____docker-compose prod-infra_____": "_____docker-compose prod-infra_____",
    "docker-compose:start-prod:server": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker compose -f ./apps/server/docker-compose-prod.yml --env-file ./apps/server/docker-compose-prod.env --compatibility up -d",
    "docker-compose:stop-prod:server": "export COMPOSE_INTERACTIVE_NO_CLI=1 && docker compose -f ./apps/server/docker-compose-prod.yml --env-file ./apps/server/docker-compose-prod.env down",
    "_____docker_____": "_____docker_____",
    "docker:build:base:current": "export PKG_VERSION=$(npm pkg get version --workspaces=false | tr -d \\\") && docker build -t ghcr.io/nestjs-mod/nestjs-mod-fullstack/nestjs-mod-fullstack-base:${PKG_VERSION} -f ./.docker/base.Dockerfile . --progress=plain --build-arg=\"PKG_VERSION=${PKG_VERSION}\"",
    "docker:build:base-server:current": "export PKG_VERSION=$(npm pkg get version --workspaces=false | tr -d \\\") && docker build -t ghcr.io/nestjs-mod/nestjs-mod-fullstack/nestjs-mod-fullstack-base-server:${PKG_VERSION} -f ./.docker/base-server.Dockerfile . --progress=plain --build-arg=\"PKG_VERSION=${PKG_VERSION}\"",
    "docker:build:server:latest": "export PKG_VERSION=$(npm pkg get version --workspaces=false | tr -d \\\") && docker build -t ghcr.io/nestjs-mod/nestjs-mod-fullstack/nestjs-mod-fullstack-server:latest -f ./.docker/server.Dockerfile . --progress=plain --build-arg=\"PKG_VERSION=${PKG_VERSION}\"",
    "_____tests_____": "_____tests_____",
    "test": "./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=test --skip-nx-cache=true --passWithNoTests --output-style=stream-without-prefixes",
    "test:e2e": "./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=e2e --skip-nx-cache=true --output-style=stream-without-prefixes",
    "test:server": "./node_modules/.bin/nx test server --skip-nx-cache=true --passWithNoTests --output-style=stream-without-prefixes",
    "_____lint_____": "_____lint_____",
    "lint": "npm run tsc:lint && ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=lint",
    "lint:fix": "npm run tsc:lint && ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=lint --fix",
    "tsc:lint": "./node_modules/.bin/tsc --noEmit -p tsconfig.base.json",
    "_____db_____": "_____db_____",
    "db:create": "./node_modules/.bin/nx run-many -t=db-create",
    "_____flyway_____": "_____flyway_____",
    "flyway:create:server": "./node_modules/.bin/nx run server:flyway-create-migration",
    "flyway:migrate:server": "./node_modules/.bin/nx run server:flyway-migrate",
    "flyway:migrate": "./node_modules/.bin/nx run-many -t=flyway-migrate",
    "_____prisma_____": "_____prisma_____",
    "prisma:pull:server": "./node_modules/.bin/nx run server:prisma-pull",
    "prisma:pull": "./node_modules/.bin/nx run-many -t=prisma-pull",
    "prisma:generate": "./node_modules/.bin/nx run-many -t=prisma-generate",
    "_____utils_____": "_____utils_____",
    "generate": "./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=generate --skip-nx-cache=true && npm run make-ts-list && npm run lint:fix",
    "tsc": "tsc",
    "nx": "nx",
    "dep-graph": "./node_modules/.bin/nx dep-graph",
    "make-ts-list": "./node_modules/.bin/rucken make-ts-list",
    "manual:prepare": "npm run generate && npm run docs:infrastructure && npm run test",
    "update:nestjs-mod-versions": "npx -y npm-check-updates @nestjs-mod/* nestjs-mod -u",
    "rucken": "rucken",
    "wait-on": "./node_modules/.bin/wait-on --timeout=240000 --interval=1000 --window --verbose"
  },
  "private": true,
  "devDependencies": {
    "@angular-devkit/build-angular": "~18.1.0",
    "@angular-devkit/core": "~18.1.0",
    "@angular-devkit/schematics": "~18.1.0",
    "@angular-eslint/eslint-plugin": "^18.0.1",
    "@angular-eslint/eslint-plugin-template": "^18.0.1",
    "@angular-eslint/template-parser": "^18.0.1",
    "@angular/cli": "~18.1.0",
    "@angular/compiler-cli": "~18.1.0",
    "@angular/language-service": "~18.1.0",
    "@commitlint/cli": "^17.0.0",
    "@commitlint/config-conventional": "^17.0.0",
    "@nestjs-mod/schematics": "^2.9.5",
    "@nestjs-mod/testing": "2.14.2",
    "@nestjs/schematics": "^10.0.1",
    "@nestjs/testing": "^10.0.2",
    "@nx/angular": "^19.5.3",
    "@nx/devkit": "19.5.3",
    "@nx/eslint": "19.5.3",
    "@nx/eslint-plugin": "19.5.3",
    "@nx/jest": "19.5.3",
    "@nx/js": "19.5.3",
    "@nx/node": "19.5.3",
    "@nx/playwright": "19.5.3",
    "@nx/web": "19.5.3",
    "@nx/webpack": "19.5.3",
    "@nx/workspace": "19.5.3",
    "@openapitools/openapi-generator-cli": "^2.13.4",
    "@playwright/test": "^1.36.0",
    "@schematics/angular": "~18.1.0",
    "@swc-node/register": "~1.9.1",
    "@swc/core": "~1.5.7",
    "@swc/helpers": "~0.5.11",
    "@theunderscorer/nx-semantic-release": "^2.11.0",
    "@types/express": "4.17.14",
    "@types/jest": "^29.4.0",
    "@types/node": "~18.16.9",
    "@typescript-eslint/eslint-plugin": "^7.16.0",
    "@typescript-eslint/parser": "^7.16.0",
    "@typescript-eslint/utils": "^7.16.0",
    "autoprefixer": "^10.4.0",
    "browser-sync": "^3.0.0",
    "eslint": "~8.57.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-playwright": "^0.15.3",
    "fast-glob": "^3.3.2",
    "jest": "^29.4.1",
    "jest-environment-jsdom": "^29.4.1",
    "jest-environment-node": "^29.4.1",
    "jest-preset-angular": "~14.1.0",
    "jsonc-eslint-parser": "^2.1.0",
    "lint-staged": "^15.2.0",
    "ng-packagr": "~18.1.0",
    "node-flywaydb": "^3.0.7",
    "nx": "19.5.3",
    "postcss": "^8.4.5",
    "postcss-url": "~10.1.3",
    "prettier": "^2.6.2",
    "prisma": "^5.18.0",
    "prisma-class-generator": "^0.2.11",
    "rucken": "^4.8.1",
    "tailwindcss": "^3.0.2",
    "ts-jest": "^29.1.0",
    "ts-node": "10.9.1",
    "typescript": "~5.5.2",
    "verdaccio": "^5.0.4"
  },
  "lint-staged": {
    "*.{js,ts}": "eslint --fix"
  },
  "scriptsComments": {
    "pm2-full:dev:start": [
      "Launching infrastructure and all applications in watch mode via PM2"
    ],
    "pm2-full:dev:stop": [
      "Stopping infrastructure and all applications in watch mode via PM2"
    ],
    "serve:dev": [
      "Running NestJS application source code in watch mode"
    ],
    "serve:dev:server": [
      "Running server source code in watch mode"
    ],
    "pm2:dev:start": [
      "Launching all applications in watch mode via PM2"
    ],
    "pm2:dev:stop": [
      "Stopping all applications in watch mode via PM2"
    ],
    "pm2-full:prod:start": [
      "Launching the infrastructure and building all applications, followed by launching them via PM2"
    ],
    "pm2-full:prod:stop": [
      "Stopping infrastructure and all applications running through PM2"
    ],
    "start": [
      "Launching a built NestJS application (you must first build it using the build command)"
    ],
    "build": [
      "Building a NestJS application"
    ],
    "start:prod:server": [
      "Launching a built server (you must first build it using the build command)"
    ],
    "pm2:start": [
      "Launch all applications in PM2 mode"
    ],
    "pm2:stop": [
      "Stop all applications in PM2 mode"
    ],
    "docker-compose-full:prod:start": [
      "Build and launching Docker Compose infrastructure with a backend in the form of a Docker container and frontend statics transmitted via Nginx"
    ],
    "docker-compose-full:prod:stop": [
      "Stopping Docker Compose infrastructure and all applications"
    ],
    "docker-compose-full:prod:only-start": [
      "Launching Docker Compose infrastructure with a backend in the form of a Docker container and frontend statics transmitted via Nginx"
    ],
    "docker-compose-full:prod:fill:database": [
      "Create and fill databases"
    ],
    "docker-compose-full:prod:test:e2e": [
      "Launching E2E tests on an application launched via Docker Compose"
    ],
    "docs:infrastructure": [
      "Creation of documentation for the entire infrastructure and creation of files necessary to launch the infrastructure"
    ],
    "docker-compose:start:server": [
      "Running the docker-compose infrastructure for server"
    ],
    "docker-compose:stop:server": [
      "Stopping the docker-compose infrastructure for server"
    ],
    "docker-compose:start-prod:server": [
      "Running the main docker-compose prod infrastructure for server"
    ],
    "docker-compose:stop-prod:server": [
      "Stopping the main docker-compose prod infrastructure for server"
    ],
    "docker:build:server:latest": [
      "Building a Docker backend image"
    ],
    "test": [
      "Running tests across the entire project"
    ],
    "test:e2e": [
      "Running E2E tests for all applications"
    ],
    "test:server": [
      "Running tests for server"
    ],
    "lint": [
      "Checking the typescript code for the entire project"
    ],
    "lint:fix": [
      "Checking the typescript code throughout the project and trying to fix everything possible"
    ],
    "tsc:lint": [
      "Checking typescript code in libraries"
    ],
    "db:create": [
      "Creation all databases of applications and modules"
    ],
    "flyway:create:server": [
      "Command to create new empty migration for server"
    ],
    "flyway:migrate:server": [
      "Applying migrations for server"
    ],
    "flyway:migrate": [
      "Applying migrations of all applications and modules"
    ],
    "prisma:pull:server": [
      "Generating a prisma schema based on a database for server"
    ],
    "prisma:pull": [
      "Generating a prisma schema based on a database"
    ],
    "prisma:generate": [
      "Generation of client prisma schema of all applications and modules"
    ],
    "generate": [
      "Running the \"generate\" nx command in applications and libraries which can be customized at your discretion",
      "automatically generating an index.ts file for each library",
      "checking the code and trying to fix it"
    ],
    "tsc": [
      "Alias for running the tsc version locally, which is in the project (example: `npm run tsc -- --noEmit -p tsconfig.base.json`),",
      "in order not to install tsc globally in the operating system"
    ],
    "nx": [
      "Alias for running the nx version locally, which is in the project (example: `./node_modules/.bin/nx dep-graph`),",
      "in order not to install nx globally in the operating system"
    ],
    "dep-graph": [
      "Generating dependency diagrams for nx applications and libraries"
    ],
    "make-ts-list": [
      "Automatically generating an index.ts file for each library,",
      "works only for nx applications created using the `--projectNameAndRootFormat=as-provided` flag"
    ],
    "manual:prepare": [
      "Preparing code, building code, creating infrastructure documentation",
      "and all the files necessary to raise the infrastructure and running tests (generate, build, docs:infrastructure, test)"
    ],
    "update:nestjs-mod-versions": [
      "Updating NestJS-mod libraries"
    ],
    "rucken": [
      "Alias for console tools and scripts for nx and not only use to automate the workflow and",
      "speed up the development process (example: `npm run rucken -- make-ts-list`, site: https://www.npmjs.com/package/rucken)"
    ],
    "wait-on": [
      "Utility for checking and waiting for site availability"
    ]
  },
  "dependencies": {
    "@angular/animations": "~18.1.0",
    "@angular/common": "~18.1.0",
    "@angular/compiler": "~18.1.0",
    "@angular/core": "~18.1.0",
    "@angular/forms": "~18.1.0",
    "@angular/platform-browser": "~18.1.0",
    "@angular/platform-browser-dynamic": "~18.1.0",
    "@angular/platform-server": "~18.1.0",
    "@angular/router": "~18.1.0",
    "@angular/ssr": "~18.1.0",
    "@nestjs-mod/common": "2.14.2",
    "@nestjs-mod/docker-compose": "^1.15.2",
    "@nestjs-mod/flyway": "^1.6.2",
    "@nestjs-mod/pino": "1.14.2",
    "@nestjs-mod/pm2": "1.12.2",
    "@nestjs-mod/prisma": "^1.9.2",
    "@nestjs-mod/reports": "2.14.2",
    "@nestjs-mod/terminus": "1.13.2",
    "@nestjs/common": "^10.0.2",
    "@nestjs/core": "^10.0.2",
    "@nestjs/platform-express": "^10.0.2",
    "@nestjs/serve-static": "^4.0.2",
    "@nestjs/swagger": "^7.4.0",
    "@nestjs/terminus": "^10.2.3",
    "@prisma/client": "^5.18.0",
    "ajv": "^8.17.1",
    "axios": "^1.6.0",
    "case-anything": "^2.1.13",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.1",
    "dotenv": "^16.4.5",
    "express": "~4.18.2",
    "nestjs-pino": "^4.1.0",
    "pino-http": "^10.2.0",
    "pino-pretty": "^11.2.2",
    "pm2": "^5.3.0",
    "reflect-metadata": "^0.1.13",
    "rxjs": "^7.8.0",
    "tslib": "^2.3.0",
    "wait-on": "^7.2.0",
    "zone.js": "~0.14.3"
  },
  "nx": {
    "includedScripts": []
  }
}